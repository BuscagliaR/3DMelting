source('C:/Users/Robert/Dropbox/Northern Arizona University/Github_Repos/3DMelting/SVD_Start.R', echo=TRUE)
plot(Temperatures, SVD.temp$v[,1])
First.Matrix <- read.table('22wt_Melt_2_CD.txt')
Temperatures = seq(20, 100, 1) ### GET THIS FROM PUB
Wavelengths = seq(300, 600, 2) ### GET THIS FROM PUB
plot(First.Matrix[,1])
plot(First.Matrix[,30])
plot(as.numeric(First.Matrix[70,]))
SVD.temp <- svd(First.Matrix)
plot(SVD.temp$d)
plot(Temperatures, SVD.temp$v[,1])
plot(Temperatures, SVD.temp$v[,1])
Temperatures = seq(20, 100, 2) ### GET THIS FROM PUB
Temperatures = seq(10, 100, 2) ### GET THIS FROM PUB
Temperatures = seq(10, 102, 2) ### GET THIS FROM PUB
plot(Temperatures, SVD.temp$v[,1])
formula(SingleStateMeltingFunction(T, Sn1, Su1, dH, Tm))
SingleStateMeltingFunction <- function(T, Sn, Su, dH, Tm)
{
(Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T)))
}
formula(SingleStateMeltingFunction(T, Sn1, Su1, dH, Tm))
formula(SingleStateMeltingFunction(T, 'Sn1', 'Su1', 'dH', 'Tm'))
SingleStateMeltingFunction <- function(T, Sn, Su, dH, Tm)
{
R = 1.821
(Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T)))
}
formula(SingleStateMeltingFunction(T, 'Sn1', 'Su1', 'dH', 'Tm'))
8.314/4.184
plot(Temperatures, SVD.temp$v[,1])
plot(Temperatures, SVD.temp$u[,1])
plot(SVD.temp$u[,1])
plot(First.Matrix[,30])
plot(SVD.temp$u[,1])
plot(Temperatures, SVD.temp$v[,1])
#simulate some data
set.seed(20160227)
x<-seq(0,50,1)
y<-((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
#for simple models nls find good starting values for the parameters even if it throw a warning
m<-nls(y~a*x/(b+x))
#get some estimation of goodness of fit
cor(y,predict(m))
plot(x,y)
plot(Temperatures, SVD.temp$v[,1])
str(m)
m$data
m$m
summary(m)
R = 1.986
x = Temperatures
R = 1.986
y = SVD.temp$v[,1]
x = Temperatures
plot(x,y)
x = Temperatures+273.15
plot(x,y)
m<-nls(y~Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x)))
summary(m)
m<-nls(y~Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))))
m<-nls(y~Sn + Su*exp(-(dH/R)*(1/Tm - 1/x))/(1+exp(-(dH/R)*(1/Tm - 1/x))))
summary(m)
m<-nls(y~Sn + Su*exp(-(dH/R)*(1/Tm - 1/x))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start=list(Sn=-0.2, Su=0.1, dH = -2000, Tm = 350))
summary(m)
m<-nls(y~Sn + Su*exp(-(dH/R)*(1/Tm - 1/x))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start=list(Sn=-0.2, Su=0.1, dH = -2000, Tm = 350))
m<-nls(y~Sn + Su*exp(-(dH/R)*(1/Tm - 1/x))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start=list(Sn=-0.2, Su=0.1, dH = 2000, Tm = 350))
summary(m)
SingleStateMeltingFunction <- function(T, Sn, Su, dH, Tm)
{
(Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T)))
}
T.grid = seq(0, 100, 2) #Temperatures from 20 to 100 by 2 degrees
y1 <- SingleStateMeltingFunction(T = T.grid, Sn = 6, Su = 15, dH = -200, Tm = 20)
y2 <- SingleStateMeltingFunction(T = T.grid, Sn = 15, Su = 0, dH = -2000, Tm = 50)
#Set the constant R value
R = 1.986
SingleStateMeltingFunction <- function(T, Sn, Su, dH, Tm)
{
(Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T)))
}
T.grid = seq(0, 100, 2) #Temperatures from 20 to 100 by 2 degrees
y1 <- SingleStateMeltingFunction(T = T.grid, Sn = 6, Su = 15, dH = -200, Tm = 20)
y2 <- SingleStateMeltingFunction(T = T.grid, Sn = 15, Su = 0, dH = -2000, Tm = 50)
y2 <- SingleStateMeltingFunction(T = T.grid, Sn = 15, Su = 0, dH = -2000, Tm = 50)
plot(T.grid, y1)
plot(T.grid, y2)
plot(T.grid, y1 + y2)
SingleStateFractionSn <- function(T,dH,Tm)
{
1/(1 + exp(-((dH/R)*((1/Tm) - (1/T)))))
}
T.grid = seq(0, 100, 2) #Temperatures from 20 to 100 by 2 degrees
y1 <- SingleStateFractionSn(T = T.grid, dH = -200, Tm = 20)
y2 <- SingleStateFractionSn(T = T.grid, dH = -2000, Tm = 50)
plot(T.grid, y1)
plot(T.grid, y2)
plot(T.grid, y1 + y2)
plot(T.grid, y1)
plot(T.grid, y2)
plot(T.grid, y1 + y2)
plot(T.grid, y2)
SingleleStateFractionSu <- function(T,dH,Tm)
{
(exp(-((dH/R)*((1/Tm) - (1/T)))))/(1 + exp(-((dH/R)*((1/Tm) - (1/T)))))
}
y3 <- SingleleStateFractionSu(T = T.grid, dH = -2000, Tm = 50)
plot(T.grid,y2)
points(T.grid,y3)
raw.data <- read.table('22wt_Melt_2_CD.txt')
temperatures <- seq(4, 94, 1)
temperatures <- seq(4, 94, 2)
wavelengths <- seq(220, 340, 1)
raw.data[,1]
plot(raw.data[,1])
plot(wavelengths, raw.data[,1])
plot(temperatures, raw,data[1,])
temperatures <- seq(4, 94, 2) + 273.15
plot(raw,data[1,])
plot(raw,data[1,])
plot(raw,data[2,])
raw.data[2,]
plot(raw.data[2,])
View(raw.data)
raw.data <- read.table('2GKU_Melt_2_CD.txt')
temperatures <- seq(4, 94, 2) + 273.15
wavelengths <- seq(220, 340, 1)
plot(wavelengths, raw.data[,1])
raw.data[2,]
plot(temperatures, raw.data[2,])
plot(temperatures, raw.data[1,])
plot(temperatures, raw.data[100,])
plot(temperatures, raw.data[300,])
plot(temperatures, raw.data[40,])
plot(temperatures, raw.data[38,])
plot(temperatures, raw.data[30,])
plot(temperatures, raw.data[20])
plot(temperatures, raw.data[20,])
plot(temperatures, raw.data[10,])
plot(temperatures, raw.data[15,])
svd.temp <- svd(raw.data)
plot(temperatures, svd.temp$u[,1])
plot(temperatures, svd.temp$u[1,])
plot(temperatures, svd.temp$v[1,])
plot(temperatures, svd.temp$v[2,])
plot(svd.temp$u[,1])
plot(wavelengths, svd.temp$u[,1])
plot(wavelengths, -svd.temp$u[,1])
plot(wavelengths, -svd.temp$u[,2])
plot(wavelengths, -svd.temp$u[,2])
plot(wavelengths, -svd.temp$u[,3])
plot(svd.temp$v[1,])
plot(svd.temp$v[,1])
plot(temperatures, svd.temp$v[,1])
plot(temperatures, svd.temp$v[,2])
plot(temperatures, svd.temp$v[,3])
plot(temperatures, svd.temp$v[,4])
plot(temperatures, svd.temp$v[,5])
plot(temperatures, svd.temp$v[,1])
plot(temperatures, svd.temp$v[,2])
plot(temperatures, svd.temp$v[,3])
plot(temperatures, svd.temp$v[,1]*svd.temp$d[1])
T <- temperatures
y <- svd.temp$v[,1]*svd.temp$d[1]
T <- temperatures
nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))))
nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))),
start = list(dH = -200, Tm=300))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))),
start = list(dH = -200, Tm=300))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))),
start = list(dH = -2000, Tm=300))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))),
start = list(Sn = 1, Su = 1, dH = -2000, Tm=300))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))),
start = list(Sn = 1, Su = 1, dH = -2000, Tm=320))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/T)))/(1+exp(-(dH/R)*(1/Tm - 1/T))),
start = list(Sn = 1, Su = 2, dH = -2000, Tm=320))
y <- svd.temp$v[,1]*svd.temp$d[1]
x <- temperatures
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 1, Su = 2, dH = -2000, Tm=320))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -200, dH = -2000, Tm=320))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -200, dH = -20000, Tm=320))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -200, dH = -20000, Tm=20))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -200, dH = -20000, Tm=325))
plot(m)
summary(m)
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 0, Su = 0, dH = -20000, Tm=325))
summary(m)
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 0, Su = 0, dH = -30000, Tm=325))
summary(m)
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 0, Su = 1, dH = -30000, Tm=325))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -1, Su = -1, dH = -30000, Tm=325))
summary(m)
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -10, Su = -1, dH = -30000, Tm=325))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -1, dH = -30000, Tm=325))
summary(m)
predict(m, x)
plot(predict(m,x))
plot(temperatures, y)
line(predict(m,x))
lines(predict(m,x))
plot(temperatures, y)
lines(predict(m,x))
lines(temperatures, predict(m,x))
y <- svd.temp$v[,2]*svd.temp$d[2]
x <- temperatures
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -1, dH = -30000, Tm=325))
summary(m)
predict(m, x)
plot(temperatures, y)
lines(temperatures, predict(m,x))
y <- svd.temp$v[,1]*svd.temp$d[1]
x <- temperatures
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -1, dH = -30000, Tm=325))
summary(m)
predict(m, x)
plot(temperatures, y)
lines(temperatures, predict(m,x))
y <- svd.temp$v[,3]*svd.temp$d[3]
x <- temperatures
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = -100, Su = -1, dH = -30000, Tm=325))
summary(m)
predict(m, x)
plot(temperatures, y)
lines(temperatures, predict(m,x))
3
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 0, Su = -15, dH = -30000, Tm=325))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 0, Su = -15, dH = 20000, Tm=325))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 0, Su = -15, dH = -20000, Tm=325))
m<-nls(y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x))),
start = list(Sn = 5, Su = -15, dH = -20000, Tm=325))
summary(m)
predict(m, x)
plot(temperatures, y)
lines(temperatures, predict(m,x))
TwoStateMeltingFunction <- function(T,Sn,S1,Su,dH1,Tm1,dH2,Tm2) #Native to Intermediate 1 to Unfolded
{
(Sn + S1*exp(-((dH1/R)*((1/Tm1) - (1/T)))) +
Su*exp(-((dH1/R)*((1/Tm1) - (1/T))))*exp(-((dH2/R)*((1/Tm2) - (1/T)))))/(1 + exp(-((dH1/R)*((1/Tm1) - (1/T)))) +
exp(-((dH1/R)*((1/Tm1) - (1/T))))*exp(-((dH2/R)*((1/Tm2) - (1/T)))))
}
y4 <- TwoStateMeltingFunction(T = T.grid,Sn = 100,S1 = 25,Su = 75, dH1 = -2000, Tm1 = 40, dH2 = -3000, Tm2 = 65)
plot(T.grid,y4)
y <- svd.temp$v[,1]*svd.temp$d[1]
x <- temperatures
model.onestate <- y ~ (Sn + Su*exp(-(dH/R)*(1/Tm - 1/x)))/(1+exp(-(dH/R)*(1/Tm - 1/x)))
m<-nls(model.onestate,
start = list(Sn = -100, Su = -1, dH = -30000, Tm=325))
model.test <- y ~ TwoStateMeltingFunction(T, Sn, S1, Su, dH1, Tm1, dH2, Tm2)
m<-nls(model.test,
start = list(Sn = -100, Su = -1, dH = -30000, Tm=325))
y <- svd.temp$v[,1]*svd.temp$d[1]
T <- temperatures
plot(T,y)
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -30000, Tm1=315, dH2 = -40000, Tm2 = 335))
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -40000, Tm2 = 335))
summary(m)
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -30000, Tm2 = 335))
summary(m)
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -24000, Tm2 = 335))
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -30000, Tm2 = 335))
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -30000, Tm2 = 350))
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -30000, Tm2 = 340))
m<-nls(model.test,
start = list(Sn = -100, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -30000, Tm2 = 330))
summary(m)
y <- svd.temp$v[,2]*svd.temp$d[2]
T <- temperatures
plot(T,y)
model.onestate <- y ~ (Sn + S1*exp(-((dH1/R)*((1/Tm1) - (1/T)))) +
Su*exp(-((dH1/R)*((1/Tm1) - (1/T))))*exp(-((dH2/R)*((1/Tm2) - (1/T)))))/(1 + exp(-((dH1/R)*((1/Tm1) - (1/T)))) +
exp(-((dH1/R)*((1/Tm1) - (1/T))))*exp(-((dH2/R)*((1/Tm2) - (1/T)))))
summary(m)
model.twostate <- y ~ TwoStateMeltingFunction(T, Sn, S1, Su, dH1, Tm1, dH2, Tm2)
m<-nls(model.onestate,
start = list(Sn = -5, S1 = -50, Su = -1, dH1 = -20000, Tm1=315, dH2 = -30000, Tm2 = 330))
summary(model.twostate)
summary(m)
m<-nls(model.onestate,
start = list(Sn = -5, S1 = 25, Su = 10, dH1 = -20000, Tm1=320, dH2 = -20000, Tm2 = 335))
summary(m)
lines(temperatures, predict(m,x))
utils::str(nlm(f, c(5), hessian = TRUE))
f <- function(x) sum((x-1:length(x))^2)
nlm(f, c(10,10))
nlm(f, c(10,10), print.level = 2)
utils::str(nlm(f, c(5), hessian = TRUE))
