(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2 + (y2 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2
}
fun.test.2 <- function(Sn1, Su1, Sn2, Su2, dH, Tm)
{
(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2 + (y2 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2
}
optim(c(1,1,1,1,-20000, 350), fun.test.2)
fun.test.1 <- function(Sn1, Su1, dH, Tm)
{
(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2
}
optim(c(1,1,-20000, 350), fun.test.1)
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2
}
optim(c(0,0,-20000, 350), fun.test.3)
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
sum(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2
}
optim(c(0,0,-20000, 350), fun.test.3)
plot(x,y)
plot(x,y1)
plot(x, SingleStateMeltingFunction(x, -77.5, -128.7, -18955.2, 1719))
optim(c(0,0,-20000, 350), fun.test.3)
optim(c(0,0,-20000, 325), fun.test.3)
r1 <- optim(c(0,0,-20000, 325), fun.test.3)
r1
r1$par
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
-sum(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2
}
r1 <- optim(c(0,0,-20000, 325), fun.test.3)
r1
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
sum(y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2
}
r1 <- optim(c(0,0,-20000, 325), fun.test.3)
r1
plot(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(1,2,-20000, 325), fun.test.3)
r1
r1 <- optim(c(1,2,-20000, 325), fun.test.3)
r1
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2)
}
r1 <- optim(c(1,2,-20000, 325), fun.test.3)
r1
plot(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
plot(x,y1)
plot(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
plot(x,y1)
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2)
}
r1 <- optim(c(1,2,-20000, 325), fun.test.3)
r1
r1 <- optim(c(-100,-200,-20000, 325), fun.test.3)
r1
r1 <- optim(c(-100,-200,-30000, 330), fun.test.3)
r1
plot(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(-100,-200,-30000, 330), fun.test.3, method='CG')
r1
r1 <- optim(c(0,0,-30000, 330), fun.test.3, method='CG')
r1
r1 <- optim(c(0,0,-30000, 330), fun.test.3, method='BFGS')
r1
r1 <- optim(c(0,0,-30000, 330), fun.test.3, method='CG')
r1
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(0,0,-31000, 330), fun.test.3, method='CG')
r1
r1 <- optim(c(0,0,-31000, 330), fun.test.3, method='Nelder-Mead')
r1
r1 <- optim(c(0,0,-31000, 330), fun.test.3, method='CG')
r1
r1 <- optim(c(0,0,-22000, 330), fun.test.3, method='CG')
r1
r1 <- optim(c(0,0,-10000, 350), fun.test.3, method='CG')
r1
r1$par
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(0,0,-20000, 350), fun.test.3, method='CG')
r1
r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
r1 <- optim(c(0,0,-20000, 350), fun.test.3, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
optim(c(1,1,-20000, 350), fun.test.1)
fun.test.3 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2)
}
r1 <- optim(c(0,0,-20000, 350), fun.test.3, method='L-BFGS-B')
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
r1$par
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(0,0,-15000, 290), fun.test.3, method='L-BFGS-B')
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
r1$par
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(0,0,-15000, 290), fun.test.3, method='SANN')
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
r1$par
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1 <- optim(c(0,0,-15000, 290), fun.test.3, method='Brent')
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
r1$par
r1 <- optim(c(0,0,-15000, 290), fun.test.3, method='L-BFGS-B')
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
r1$par
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
fun.test.4 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
Sn2<-z[3]
Su2<-z[4]
dH<-z[5]
Tm<-z[6]
out <- sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2) +
sum((y2 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2)
}
r2 <- optim(c(0,0,0,0-15000, 290), fun.test.4, method='L-BFGS-B')
r2 <- optim(c(0,0,0,0,-15000, 290), fun.test.4, method='L-BFGS-B')
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r1
# r1 <- optim(c(0,0,-20000, 350), fun.test.3)
r2
r1$par
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[5], r2$par[6]))
plot(x,y2)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
plot(x,y2)
lines(x, SingleStateMeltingFunction(x, r2$par[3], r2$par[4], r2$par[5], r2$par[6]))
svd.temp$v%*%svd.temp$d
svd.temp$d%*%svd.temp$v
plot(svd.temp$d%*%svd.temp$v)
plot(as.vector(svd.temp$d%*%svd.temp$v))
plot(as.vector(svd.temp$v%*%svd.temp$d))
svd.temp$u%*%svd.temp$d%*%svd.temp$v
svd.temp$u%*%svd.temp$d%*%t(svd.temp$v)
plot(as.vector(svd.temp$v%*%diag(svd.temp$d)))
svd.temp$v%*%diag(svd.temp$d)
svd.temp$v%*%diag(svd.temp$d)[,1]
plot(svd.temp$v%*%diag(svd.temp$d)[,1])
r1 <- optim(c(0,0,-20000, 350), one.state.1)
r1
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
r1$value
one.state.2 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
Sn2<-z[3]
Su2<-z[4]
dH<-z[5]
Tm<-z[6]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2) +
sum((y1 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2)
}
one.state.2 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
Sn2<-z[3]
Su2<-z[4]
dH<-z[5]
Tm<-z[6]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2) +
sum((y1 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2)
}
r2 <- optim(c(0,0,0,0-20000, 350), one.state.2)
r2$value
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[4]))
r2 <- optim(c(0,0,0,0,-20000, 350), one.state.2)
r2$value
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[4]))
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[5], r2$par[6]))
one.state.2 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
Sn2<-z[3]
Su2<-z[4]
dH<-z[5]
Tm<-z[6]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2) +
sum((y2 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2)
}
r2 <- optim(c(0,0,0,0,-20000, 350), one.state.2)
r2$value
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[5], r2$par[6]))
r2
r2 <- optim(c(0,0,0,0,-25000, 350), one.state.2)
r2
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[5], r2$par[6]))
one.state.1 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
dH<-z[3]
Tm<-z[4]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2)  ### How can we do this in a reduced way.....
### One response vector that is k*length(x).  Then
}
r1 <- optim(c(0,0,-20000, 350), one.state.1, method='L-BFGS-B')
r1$value
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
one.state.2 <- function(z)
{
Sn1<-z[1]
Su1<-z[2]
Sn2<-z[3]
Su2<-z[4]
dH<-z[5]
Tm<-z[6]
sum((y1 - SingleStateMeltingFunction(x, Sn1, Su1, dH, Tm))^2) +
sum((y2 - SingleStateMeltingFunction(x, Sn2, Su2, dH, Tm))^2)
}
r2 <- optim(c(0,0,0,0,-25000, 350), one.state.2, method='L-BFGS-B')
r2
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[5], r2$par[6]))
plot(x,y2)
lines(x, SingleStateMeltingFunction(x, r2$par[3], r2$par[4], r2$par[5], r2$par[6]))
two.state.1 <- function(z)
{
Sn1<-z[1]
S11<-z[2]
Su1<-z[3]
dH1<-z[4]
Tm1<-z[5]
dH2<-z[6]
Tm2<-z[7]
sum((y1 - SingleStateMeltingFunction(x, Sn1, S11, Su1, dH1, Tm1, dH2, Tm2))^2)  ### How can we do this in a reduced way.....
### One response vector that is k*length(x).  Then
}
r1 <- optim(c(0,0,0,-20000, 325, -30000, 350), two.state.1, method='L-BFGS-B')
two.state.1 <- function(z)
{
Sn1<-z[1]
S11<-z[2]
Su1<-z[3]
dH1<-z[4]
Tm1<-z[5]
dH2<-z[6]
Tm2<-z[7]
sum((y1 - TwoStateMeltingFunction(x, Sn1, S11, Su1, dH1, Tm1, dH2, Tm2))^2)  ### How can we do this in a reduced way.....
### One response vector that is k*length(x).  Then
}
r1 <- optim(c(0,0,0,-20000, 325, -30000, 350), two.state.1, method='L-BFGS-B')
TwoStateMeltingFunction <- function(T,Sn,S1,Su,dH1,Tm1,dH2,Tm2) #Native to Intermediate 1 to Unfolded
{
(Sn + S1*exp(-((dH1/R)*((1/Tm1) - (1/T)))) +
Su*exp(-((dH1/R)*((1/Tm1) - (1/T))))*exp(-((dH2/R)*((1/Tm2) - (1/T)))))/(1 + exp(-((dH1/R)*((1/Tm1) - (1/T)))) +
exp(-((dH1/R)*((1/Tm1) - (1/T))))*exp(-((dH2/R)*((1/Tm2) - (1/T)))))
}
two.state.1 <- function(z)
{
Sn1<-z[1]
S11<-z[2]
Su1<-z[3]
dH1<-z[4]
Tm1<-z[5]
dH2<-z[6]
Tm2<-z[7]
sum((y1 - TwoStateMeltingFunction(x, Sn1, S11, Su1, dH1, Tm1, dH2, Tm2))^2)  ### How can we do this in a reduced way.....
### One response vector that is k*length(x).  Then
}
r1 <- optim(c(0,0,0,-20000, 325, -30000, 350), two.state.1, method='L-BFGS-B')
r1$value
plot(x,y1)
lines(x, SingleStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]))
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4]), r1$par[5], r1$par[6], r1$par[7])
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-20000, 325, -30000, 350), two.state.1, method='L-BFGS-B')
r1$value
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1
r1 <- optim(c(0,0,0,-10000, 300, -10000, 300), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-10000, 350, -10000, 300), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-10000, 325, -20000, 300), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-10000, 350, -20000, 300), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-20000, 315, -40000, 350), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-25000, 300, -30000, 350), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r1 <- optim(c(0,0,0,-25000, 310, -30000, 350), two.state.1, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
two.state.2 <- function(z)
{
Sn1<-z[1]
S11<-z[2]
Su1<-z[3]
Sn2<-z[4]
S12<-z[5]
Su2<-z[6]
dH1<-z[7]
Tm1<-z[8]
dH2<-z[9]
Tm2<-z[10]
sum((y1 - TwoStateMeltingFunction(x, Sn1, S11, Su1, dH1, Tm1, dH2, Tm2))^2) +
sum((y2 - TwoStateMeltingFunction(x, Sn2, S12, Su2, dH1, Tm1, dH2, Tm2))^2)
}
r1 <- optim(c(0,0,0,0,0,0-25000, 310, -30000, 350), two.state.2, method='L-BFGS-B')
r1 <- optim(c(0,0,0,0,0,0, -25000, 310, -30000, 350), two.state.2, method='L-BFGS-B')
r1
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r1$par[1], r1$par[2], r1$par[3], r1$par[4], r1$par[5], r1$par[6], r1$par[7]))
r2
r2 <- optim(c(0,0,0,0,0,0, -25000, 310, -30000, 350), two.state.2, method='L-BFGS-B')
r2
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2 <- optim(c(0,0,0,0,0,0, -25000, 310, -30000, 350), two.state.2, method='L-BFGS-B')
r2
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
plot(x,y2)
lines(x, TwoStateMeltingFunction(x, r2$par[4], r2$par[5], r2$par[6], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2 <- optim(c(0,0,0,0,0,0, -25000, 341, -30000, 323), two.state.2, method='L-BFGS-B')
r2
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r2
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
plot(x,y2)
lines(x, TwoStateMeltingFunction(x, r2$par[4], r2$par[5], r2$par[6], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r3 <- r2 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r2
r3 <- r2 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r2
r3 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
for(j in 1:100)
r3 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r2
r3 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
for(j in 1:100)
r3 <- optim(r3$par, two.state.2, method='L-BFGS-B')
r3
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
plot(x,y2)
lines(x, TwoStateMeltingFunction(x, r2$par[4], r2$par[5], r2$par[6], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2<-r3
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
plot(x,y2)
lines(x, TwoStateMeltingFunction(x, r2$par[4], r2$par[5], r2$par[6], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r2
r3 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
for(j in 1:1000)
r3 <- optim(r3$par, two.state.2, method='L-BFGS-B')
r3
r2<-r3
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
plot(x,y2)
lines(x, TwoStateMeltingFunction(x, r2$par[4], r2$par[5], r2$par[6], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
r2 <- optim(c(0,0,0,0,0,0, -24000, 341, -31000, 323), two.state.2, method='L-BFGS-B')
r2
r3 <- optim(r2$par, two.state.2, method='L-BFGS-B')
r3
for(j in 1:1000)
r3 <- optim(r3$par, two.state.2, method='L-BFGS-B')
r3
r2<-r3
plot(x,y1)
lines(x, TwoStateMeltingFunction(x, r2$par[1], r2$par[2], r2$par[3], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
plot(x,y2)
lines(x, TwoStateMeltingFunction(x, r2$par[4], r2$par[5], r2$par[6], r2$par[7], r2$par[8], r2$par[9], r2$par[10]))
### As discussed, it seems like R may require these to be in a slightly different form
### While we are working on that, I wanted to confirm the functions were working.
### Setup ####
### Data
raw.data <- read.table('2GKU_Melt_2_CD.txt')
temperatures <- seq(4, 94, 2) + 273.15 ## Temperature in Kelvin
wavelengths <- seq(220, 340, 1)
plot(wavelengths, raw.data[,1])
plot(temperatures, raw.data[26,])
plot(temperatures, raw.data[22,])
plot(temperatures, raw.data[10,])
plot(temperatures, raw.data[,10])
plot(temperatures, raw.data[60,])
plot(temperatures, raw.data[55,])
###
svd.temp <- svd(raw.data)
svd.temp$u%*%diag(svd$d)
diag(svd$d)
svd.temp$u%*%diag(svd.temp$d)
svd.temp$u%*%diag(svd.temp$d)%*%svd.temp$v
temp.2 <- svd.temp$u%*%diag(svd.temp$d)%*%svd.temp$v
cbind(raw.data[,1],temp.2[,1])
temp.2 <- svd.temp$u%*%diag(svd.temp$d)%*%t(svd.temp$v)
cbind(raw.data[,1],temp.2[,1])
plot(temperatures, temp.2[55,])
singlular.temp <- svd.temp$d
singular.temp <- svd.temp$d
singular.temp
singular.temp[6:46]<-0
singular.temp
temp.2 <- svd.temp$u%*%diag(singular.temp)%*%t(svd.temp$v)
###
svd.temp <- svd(raw.data)
temp.2 <- svd.temp$u%*%diag(svd.temp$d)%*%t(svd.temp$v)
plot(temperatures, temp.2[55,])
singular.temp[6:46]<-0
temp.3 <- svd.temp$u%*%diag(singular.temp)%*%t(svd.temp$v)
cbind(raw.data[,1],temp.2[,1], temp.3[,1])
points(temperatures, temp.3[55,])
singular.temp[3:46]<-0
temp.3 <- svd.temp$u%*%diag(singular.temp)%*%t(svd.temp$v)
points(temperatures, temp.3[55,])
plot(temperatures, temp.2[55,], type='l')
plot(temperatures, temp.3[55,], type='l')
y1 <- svd.temp$v[,1]*svd.temp$d[1]
y2 <- svd.temp$v[,2]*svd.temp$d[2]
y3 <- svd.temp$v[,3]*svd.temp$d[3]
y4 <- svd.temp$v[,4]*svd.temp$d[4]
y5 <- svd.temp$v[,5]*svd.temp$d[5]
y6 <- svd.temp$v[,6]*svd.temp$d[6]
x <- temperatures
plot(x, y1)
plot(x, -y1)
